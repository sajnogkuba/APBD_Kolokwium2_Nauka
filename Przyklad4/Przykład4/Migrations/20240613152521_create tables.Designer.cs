// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przykład4.Contexts;

#nullable disable

namespace Przykład4.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240613152521_create tables")]
    partial class createtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Przykład4.Models.Backpack", b =>
                {
                    b.Property<int>("BackpackCharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CharacterId");

                    b.Property<int>("BackpackItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemId");

                    b.Property<int>("BackpackAmount")
                        .HasColumnType("int")
                        .HasColumnName("Amount");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("BackpackCharacterId", "BackpackItemId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("backpacks", t =>
                        {
                            t.Property("CharacterId")
                                .HasColumnName("CharacterId1");

                            t.Property("ItemId")
                                .HasColumnName("ItemId1");
                        });
                });

            modelBuilder.Entity("Przykład4.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("CharacterCurrentWeight")
                        .HasColumnType("int")
                        .HasColumnName("CurrentWei");

                    b.Property<string>("CharacterFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("CharacterLastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("LastName");

                    b.Property<int>("CharacterMaxWeight")
                        .HasColumnType("int")
                        .HasColumnName("MaxWeight");

                    b.HasKey("CharacterId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("Przykład4.Models.CharacterTitle", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CharacterId");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleId");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("AcquiredAt");

                    b.HasKey("CharacterId", "TitleId");

                    b.HasIndex("TitleId");

                    b.ToTable("character_titles");
                });

            modelBuilder.Entity("Przykład4.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("ItemWeight")
                        .HasColumnType("int")
                        .HasColumnName("Weight");

                    b.HasKey("ItemId");

                    b.ToTable("items");
                });

            modelBuilder.Entity("Przykład4.Models.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("TitleId");

                    b.ToTable("titles");
                });

            modelBuilder.Entity("Przykład4.Models.Backpack", b =>
                {
                    b.HasOne("Przykład4.Models.Character", "Character")
                        .WithMany("Backpacks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przykład4.Models.Item", "Item")
                        .WithMany("Backpacks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Przykład4.Models.CharacterTitle", b =>
                {
                    b.HasOne("Przykład4.Models.Character", "Character")
                        .WithMany("CharacterTitles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przykład4.Models.Title", "Title")
                        .WithMany("CharacterTitles")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Przykład4.Models.Character", b =>
                {
                    b.Navigation("Backpacks");

                    b.Navigation("CharacterTitles");
                });

            modelBuilder.Entity("Przykład4.Models.Item", b =>
                {
                    b.Navigation("Backpacks");
                });

            modelBuilder.Entity("Przykład4.Models.Title", b =>
                {
                    b.Navigation("CharacterTitles");
                });
#pragma warning restore 612, 618
        }
    }
}
